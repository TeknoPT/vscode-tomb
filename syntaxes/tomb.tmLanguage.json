{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Tomb",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#reserved-words"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#type-builtin"
		},
		{
			"include": "#methods"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "constant.character.tomb",
				"match": "\\b(if|else|while|for)\\b"
			},
			{
				"name": "entity.name.operator",
				"match": "\\b(throw|return|continue|break)\\b"				
			},
			{
				"name": "keyword.method.name.tomb",
				"match": "\\b(constructor)\\b",
				"patterns": [
					{
						"include": "#methods"
					}
				]
			},
			{
				"name": "keyword.control.tomb",
				"match": "\\b(import)\\b"
			},
			{
				"name": "keyword.method.name.tomb",
				"match": "\\b(contract|token|event|struct|description|script|enum)\\b"
			},
			{
				"name": "keyword.method.name.tomb",
				"match": "\\b(global)\\b"
			},
			{
				"name": "constant.character.tomb",
				"match": "\\b(this|local)\\b"
			},
			{
				"name": "constant.language.tomb",
				"match": "\\b(true|false)\\b"
			},
			{
				"name": "entity.name.operator",
				"match": "\\b(emit|task|property)\\b"
			}
		]
		},
		"strings": {
			"name": "string.quoted.double.tomb",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.tomb",
					"match": "\\\\."
				}
			]
		},
		"variables" : {
			"patterns": [{
				"name" : "meta.object-literal.key",
				"match": "\\b([A-z]+)\\b",
				"patterns": [
					{
						"include": "#comments"
					}
				]
			}]
		},
		"type-builtin" : {
			"patterns": [{
				"name": "variable.other.constant",
				"match": "\\b(bool|number|address|string|decimal|hash|timestamp)\\b"
			},
			{
				"name" : "keyword.control.flow.throw.cs",
				"match": "\\b(const)\\b"
			},
			
			{
				"begin": "\\b(storage_map|storage_list)\\b<",
				"end": ">",
				"beginCaptures": {
					"1" : {
						"name" : "entity.other.attribute-name.class.css"
					}
				},
				"patterns": [
					{
						"include": "#type-builtin"
					},
					{
						"include": "#comments"
					}
				]
			}
		]
			
		},
		"methods" : {
			"patterns": [
				{
					"match": "\\b(public|private)(.[A-z]+|code)\\b(\\()",
					"captures": {
						"1" : {
							"name": "keyword.method.name.tomb"
						},
						"2" :{
							"name" :"entity.name.function"
						}
					}
				},
				{
					"match": "\\b(trigger|nft)(.[A-z]+)\\b(\\(|<)",
					"captures": {
						"1" : {
							"name": "entity.name.operator"
						},
						"2" :{
							"name" :"entity.name.function"
						}
					}
				},
				{
					"match": "\\b(code)\\b(\\()",
					"name" :"entity.name.function"
				},
				{
					"begin": "\\b([A-z]+)\\b",
					"match": "\\b(\\.[A-z]+)\\b(\\()",
					"end": "\\b(\\))\\b",
					"captures": {
						"1" : {
							"name" : "entity.name.function"
						}
					}
				}
			]
		},
		"reserved-words" : {
			"patterns": [{
				"match": "\\b(Runtime|Leaderboard|Time|Format|Map|Token|_ROM|_RAM|asm)\\b",
				"name" : "meta.preprocessor.tomb"
			},
			{
				"match": "(@|\\$)\\b(null|THIS_ADDRESS|TYPE_OF|THIS_SYMBOL)\\b", 
				"name" : "meta.type.cast.expr.tomb"
				
			}]
		},
		"operators" : {
			"patterns": [
				{
					"match": "(\\*=|/=|\\+=|-=|:=|%=)",
					"name" : "keyword.operator.new.tomb",
					"patterns": [
						{
							"include": "#comments"
						}
					]
				},
				{
					"begin": "\\b(=)\\b",
					"match": "([0-9]\\b|[0-9])",
					"end": "\\b(;)\\b",
					"name" : "meta.preprocessor.numeric.tomb",
					"patterns": [
						{
							"include": "#comments"
						}
					]
				},
				{
					"match": "(\\+|-|/|%|\\*)",
					"name" : "storage.type.tomb"
				},
				{
					"match": "(==|>|<|>=|\\<=|!=)",
					"name" : "punctuation.section.embedded.tomb"
				},
				{
					"begin": "\\b(if|while)\\b",
					"match": "\\b(or|and|nor|xor)\\b",
					"name" : "punctuation.section.embedded"
				}
			]
		},
		"comments" : {
			"patterns": [
				{
					"name": "comment.block.cs",
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.cs"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.cs"
						}
					}
				},
				{
					"begin": "(^\\s+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.cs"
						}
					},
					"end": "(?=$)",
					"patterns": [
						{
							"name": "comment.block.documentation.cs",
							"begin": "(?<!/)///(?!/)",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.cs"
								}
							},
							"end": "(?=$)",
							"patterns": [
								{
									"include": "#xml-doc-comment"
								}
							]
						},
						{
							"name": "comment.line.double-slash.cs",
							"begin": "(?<!/)//(?:(?!/)|(?=//))",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.cs"
								}
							},
							"end": "(?=$)"
						}
					]
				}
			]
		}
	},
	"scopeName": "tomb"
}